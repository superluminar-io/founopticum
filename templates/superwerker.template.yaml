AWSTemplateFormatVersion: 2010-09-09
Transform: AWS::Serverless-2016-10-31
Description: Automated Best Practices for AWS Cloud setups - https://superwerker.cloud (qs-1rhrhoi4t)
Metadata:
  SuperwerkerVersion: 0.0.0-DEVELOPMENT
  QuickStartDocumentation:
    EntrypointName: "Launch superwerker"
    Order: "1"
  AWS::CloudFormation::Interface:
    ParameterGroups:
    - Label:
        default: Features
      Parameters:
      - IncludeBudget
      - IncludeControlTower
      - IncludeGuardDuty
      - IncludeSecurityHub
      - IncludeBackup
      - IncludeServiceControlPolicies
    - Label:
        default: Domain Configuration
      Parameters:
      - Domain
      - Subdomain
    - Label:
        default: AWS Quick Start configuration
      Parameters:
      - QSS3BucketName
      - QSS3KeyPrefix
      - QSS3BucketRegion
    ParameterLabels:
      Domain:
        default: Domain for automated DNS configuration
      Subdomain:
        default: Subdomain for automated DNS configuration
      QSS3BucketName:
        default: Quick Start S3 Bucket Name
      QSS3BucketRegion:
        default: Quick Start S3 Bucket Region
      QSS3KeyPrefix:
        default: Quick Start S3 Key Prefix
      IncludeBudget:
        default: Enable Budget Alarm for monthly AWS spendings
      IncludeControlTower:
        default: Enable AWS Control Tower
      IncludeGuardDuty:
        default: Enable Amazon GuardDuty
      IncludeSecurityHub:
        default: Enable AWS Security Hub
      IncludeBackup:
        default: Enable Automated Backups
      IncludeServiceControlPolicies:
        default: Enable Service Control Policies in AWS Organizations
      IncludeCFCT:
        default: Enable the Customizations for Control Tower Solution

Parameters:
  Domain:
    Type: String
    Description: Domain used for RootMail feature
  Subdomain:
    Type: String
    Default: aws
    Description: Sub domain used for RootMail feature
  IncludeBudget:
    AllowedValues:
      - 'Yes'
      - 'No'
    Default: 'Yes'
    Type: String
    Description: Enable Budget Alarm for monthly AWS spending
  IncludeControlTower:
    AllowedValues:
      - 'Yes'
      - 'No'
    Default: 'Yes'
    Type: String
    Description: Enable AWS Control Tower
  IncludeGuardDuty:
    AllowedValues:
      - 'Yes'
      - 'No'
    Default: 'Yes'
    Type: String
    Description: Enable Amazon GuardDuty
  IncludeSecurityHub:
    AllowedValues:
      - 'Yes'
      - 'No'
    Default: 'Yes'
    Type: String
    Description: Enable AWS Security Hub
  IncludeBackup:
    AllowedValues:
      - 'Yes'
      - 'No'
    Default: 'Yes'
    Type: String
    Description: Enable Automated Backups
  IncludeServiceControlPolicies:
    AllowedValues:
      - 'Yes'
      - 'No'
    Default: 'Yes'
    Type: String
    Description: Enable Service Control Policies in AWS Organizations
  IncludeCFCT:
    AllowedValues:
      - 'Yes'
      - 'No'
    Default: 'No'
    Type: String
    Description: Enable the Customizations for Control Tower Solution

  QSS3BucketName:
    AllowedPattern: '^[0-9a-zA-Z]+([0-9a-zA-Z-]*[0-9a-zA-Z])*$'
    ConstraintDescription: Quick Start bucket name can include numbers, lowercase letters, uppercase
      letters, and hyphens (-). It cannot start or end with a hyphen (-).
    Default: aws-quickstart
    Description: S3 bucket name for the Quick Start assets. Quick Start bucket name can
      include numbers, lowercase letters, uppercase letters, and hyphens (-). It
      cannot start or end with a hyphen (-).
    Type: String
  QSS3BucketRegion:
    Default: 'us-east-1'
    Description: The AWS Region where the Quick Start S3 bucket (QSS3BucketName) is hosted. When using your own bucket, you must specify this value.
    Type: String
  QSS3KeyPrefix:
    AllowedPattern: '^([0-9a-zA-Z-.]+/)*$'
    ConstraintDescription: Quick Start key prefix can include numbers, lowercase letters, uppercase
      letters, hyphens (-), dots (.) and forward slash (/). The prefix should
      end with a forward slash (/).
    Default: quickstart-superwerker/
    Description: S3 key prefix for the Quick Start assets. Quick Start key prefix can
      include numbers, lowercase letters, uppercase letters, hyphens (-), dots
      (.) and forward slash (/) and it should end with a forward slash (/).
    Type: String



Conditions:
  UsingDefaultBucket: !Equals [!Ref QSS3BucketName, 'aws-quickstart']
  IncludeBudget: !Equals [ !Ref IncludeBudget, 'Yes' ]
  IncludeControlTower: !Equals [ !Ref IncludeControlTower, 'Yes' ]
  IncludeGuardDuty: !And
    - !Condition IncludeControlTower
    - !Equals [ !Ref IncludeGuardDuty, 'Yes' ]
  IncludeSecurityHub: !And
    - !Condition IncludeControlTower
    - !Equals [ !Ref IncludeSecurityHub, 'Yes' ]
  IncludeBackup: !And
    - !Condition IncludeControlTower
    - !Equals [ !Ref IncludeBackup, 'Yes' ]
  IncludeServiceControlPolicies: !And
    - !Condition IncludeControlTower
    - !Equals [ !Ref IncludeServiceControlPolicies, 'Yes' ]
  IncludeCFCT: !And
    - !Condition IncludeControlTower
    - !Equals [ !Ref IncludeCFCT, 'Yes' ]

Resources:

  Budget:
    Condition: IncludeBudget
    Type: AWS::CloudFormation::Stack
    Properties:
      TemplateURL:
        Fn::Sub:
          - 'https://${S3Bucket}.s3.${S3Region}.${AWS::URLSuffix}/${QSS3KeyPrefix}templates/budget.yaml'
          - S3Region: !If [UsingDefaultBucket, !Sub '${AWS::Region}', !Ref QSS3BucketRegion]
            S3Bucket: !If [UsingDefaultBucket, !Sub '${QSS3BucketName}-${AWS::Region}', !Ref QSS3BucketName]

  ControlTower:
    Condition: IncludeControlTower
    Type: AWS::CloudFormation::Stack
    Properties:
      TemplateURL:
        Fn::Sub:
          - 'https://${S3Bucket}.s3.${S3Region}.${AWS::URLSuffix}/${QSS3KeyPrefix}templates/control-tower.yaml'
          - S3Region: !If [UsingDefaultBucket, !Sub '${AWS::Region}', !Ref QSS3BucketRegion]
            S3Bucket: !If [UsingDefaultBucket, !Sub '${QSS3BucketName}-${AWS::Region}', !Ref QSS3BucketName]
      Parameters:
        AuditAWSAccountEmail: !GetAtt GeneratedAuditAWSAccountEmail.email
        LogArchiveAWSAccountEmail: !GetAtt GeneratedLogArchiveAWSAccountEmail.email

  GeneratedAuditAWSAccountEmail:
    Type: AWS::CloudFormation::CustomResource
    Properties:
      ServiceToken: !GetAtt GenerateLogAndOrAuditEmailCustomResource.Arn

  GeneratedLogArchiveAWSAccountEmail:
    Type: AWS::CloudFormation::CustomResource
    Properties:
      ServiceToken: !GetAtt GenerateLogAndOrAuditEmailCustomResource.Arn

  GenerateLogAndOrAuditEmailCustomResource:
    Type: AWS::Serverless::Function
    Properties:
      Timeout: 200
      Handler: index.handler
      Runtime: python3.7
      Policies:
        - LambdaInvokePolicy:
            FunctionName: !GetAtt RootMail.Outputs.EmailGeneratorFunction
      InlineCode: !Sub |
        import boto3
        import cfnresponse
        import json

        lambda_client = boto3.client("lambda")

        CREATE = 'Create'
        DELETE = 'Delete'
        UPDATE = 'Update'

        def exception_handling(function):
            def catch(event, context):
                try:
                    function(event, context)
                except Exception as e:
                    print(e)
                    print(event)
                    cfnresponse.send(event, context, cfnresponse.FAILED, {})

            return catch

        @exception_handling
        def handler(event, context):
            RequestType = event["RequestType"]
            Properties = event["ResourceProperties"]
            LogicalResourceId = event["LogicalResourceId"]
            PhysicalResourceId = event.get("PhysicalResourceId")

            print('RequestType: {}'.format(RequestType))
            print('PhysicalResourceId: {}'.format(PhysicalResourceId))
            print('LogicalResourceId: {}'.format(LogicalResourceId))

            id = PhysicalResourceId

            data = {}

            if RequestType == CREATE or RequestType == UPDATE:
              lambda_response = lambda_client.invoke(
                FunctionName='${RootMail.Outputs.EmailGeneratorFunction}'
              )

              response_json = json.loads(lambda_response['Payload'].read().decode('utf-8'))
              data['email'] = response_json['email']

            cfnresponse.send(event, context, cfnresponse.SUCCESS, data, id)

  GuardDuty:
    Condition: IncludeGuardDuty
    Type: AWS::CloudFormation::Stack
    Properties:
      TemplateURL:
        Fn::Sub:
          - 'https://${S3Bucket}.s3.${S3Region}.${AWS::URLSuffix}/${QSS3KeyPrefix}templates/guardduty.yaml'
          - S3Region: !If [UsingDefaultBucket, !Sub '${AWS::Region}', !Ref QSS3BucketRegion]
            S3Bucket: !If [UsingDefaultBucket, !Sub '${QSS3BucketName}-${AWS::Region}', !Ref QSS3BucketName]

  LivingDocumentation:
    Type: AWS::CloudFormation::Stack
    Properties:
      TemplateURL:
        Fn::Sub:
          - 'https://${S3Bucket}.s3.${S3Region}.${AWS::URLSuffix}/${QSS3KeyPrefix}templates/living-documentation.yaml'
          - S3Region: !If [UsingDefaultBucket, !Sub '${AWS::Region}', !Ref QSS3BucketRegion]
            S3Bucket: !If [UsingDefaultBucket, !Sub '${QSS3BucketName}-${AWS::Region}', !Ref QSS3BucketName]
      Parameters:
        SuperwerkerDomain: !Sub '${Subdomain}.${Domain}'

  RootMail:
    Type: AWS::CloudFormation::Stack
    Properties:
      TemplateURL:
        Fn::Sub:
          - 'https://${S3Bucket}.s3.${S3Region}.${AWS::URLSuffix}/${QSS3KeyPrefix}templates/rootmail.yaml'
          - S3Region: !If [UsingDefaultBucket, !Sub '${AWS::Region}', !Ref QSS3BucketRegion]
            S3Bucket: !If [UsingDefaultBucket, !Sub '${QSS3BucketName}-${AWS::Region}', !Ref QSS3BucketName]
      Parameters:
        Domain: !Ref Domain
        Subdomain: !Ref Subdomain

  SecurityHub:
    Condition: IncludeSecurityHub
    Type: AWS::CloudFormation::Stack
    Properties:
      TemplateURL:
        Fn::Sub:
          - 'https://${S3Bucket}.s3.${S3Region}.${AWS::URLSuffix}/${QSS3KeyPrefix}templates/security-hub.yaml'
          - S3Region: !If [UsingDefaultBucket, !Sub '${AWS::Region}', !Ref QSS3BucketRegion]
            S3Bucket: !If [UsingDefaultBucket, !Sub '${QSS3BucketName}-${AWS::Region}', !Ref QSS3BucketName]

  Backup:
    Condition: IncludeBackup
    Type: AWS::CloudFormation::Stack
    DependsOn: ControlTower
    Properties:
      TemplateURL:
        Fn::Sub:
          - 'https://${S3Bucket}.s3.${S3Region}.${AWS::URLSuffix}/${QSS3KeyPrefix}templates/backup.yaml'
          - S3Region: !If [UsingDefaultBucket, !Sub '${AWS::Region}', !Ref QSS3BucketRegion]
            S3Bucket: !If [UsingDefaultBucket, !Sub '${QSS3BucketName}-${AWS::Region}', !Ref QSS3BucketName]

  ServiceControlPolicies:
    Condition: IncludeServiceControlPolicies
    Type: AWS::CloudFormation::Stack
    DependsOn: ControlTower
    Properties:
      TemplateURL:
        Fn::Sub:
          - 'https://${S3Bucket}.s3.${S3Region}.${AWS::URLSuffix}/${QSS3KeyPrefix}templates/service-control-policies.yaml'
          - S3Region: !If [UsingDefaultBucket, !Sub '${AWS::Region}', !Ref QSS3BucketRegion]
            S3Bucket: !If [UsingDefaultBucket, !Sub '${QSS3BucketName}-${AWS::Region}', !Ref QSS3BucketName]
      Parameters:
        IncludeSecurityHub: !If
          - IncludeSecurityHub
          - true
          - false
        IncludeBackup: !If
          - IncludeBackup
          - true
          - false

  CFTC:
    Condition: IncludeCFCT
    Type: AWS::CloudFormation::Stack
    DependsOn: ControlTower
    Properties:
      TemplateURL: https://s3.amazonaws.com/solutions-reference/customizations-for-aws-control-tower/latest/custom-control-tower-initiation.template
      Parameters:
        PipelineApprovalStage: 'No'
        PipelineApprovalEmail: ''
        CodePipelineSource: 'AWS CodeCommit'
        CodeCommitRepositoryName: 'superwerker-custom-control-tower-configuration'
        CodeCommitBranchName: 'main'
        ExistingRepository: 'No'

Outputs:

  RootMailDelegationTarget:
    Description: Nameservers for the hosted zone delegation
    Value: !GetAtt RootMail.Outputs.DelegationTarget
