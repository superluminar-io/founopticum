AWSTemplateFormatVersion: 2010-09-09
Transform: AWS::Serverless-2016-10-31

Parameters:
  SuperwerkerDomain:
    Type: String
  SuperwerkerStackName:
    Type: String
    Description: Name of the parent superwerker CloudFormation stack

Resources:
  DashboardGeneratorFunction:
    Type: AWS::Serverless::Function
    Properties:
      Events:
        DailyGeneration:
          Type: Schedule
          Properties:
            Schedule: rate(1 day)
        EmailHealth:
          Type: CloudWatchEvent
          Properties:
            Pattern:
              detail-type:
                - CloudWatch Alarm State Change
              source:
                - aws.cloudwatch
              detail:
                alarmName:
                  - superwerker-RootMailReady
      Handler: index.handler
      Runtime: python3.7
      Timeout: 60
      Policies:
        - SSMParameterReadPolicy:
            ParameterName: 'superwerker/*'
        - Version: 2012-10-17
          Statement:
            - Effect: Allow
              Action: cloudwatch:PutDashboard
              Resource: !Sub arn:${AWS::Partition}:cloudwatch::${AWS::AccountId}:dashboard/superwerker
            - Effect: Allow
              Action: cloudwatch:DescribeAlarms
              Resource: '*'
            - Effect: Allow
              Action: cloudformation:GetTemplateSummary
              Resource: !Sub arn:${AWS::Partition}:cloudformation:${AWS::Region}:${AWS::AccountId}:stack/${SuperwerkerStackName}/*
      Environment:
        Variables:
          SUPERWERKER_DOMAIN: !Ref SuperwerkerDomain
          SUPERWERKER_STACK_NAME: !Ref SuperwerkerStackName
      InlineCode: |
        import boto3
        import json
        import os
        import urllib.request
        import urllib.parse

        from datetime import datetime

        cw = boto3.client("cloudwatch")
        cfn = boto3.client("cloudformation")
        ssm = boto3.client("ssm")

        def get_latest_version():
          response = urllib.request.urlopen('https://api.github.com/repos/superwerker/superwerker/releases/latest').read()
          data = json.loads(response.decode('utf-8'))
          
          return data['name']

        def get_current_version():
          response = cfn.get_template_summary(
              StackName=os.getenv('SUPERWERKER_STACK_NAME')
          )
          
          metadata = json.loads(response['Metadata'])
          
          return metadata['SuperwerkerVersion']

        def get_version_label():
          current = get_current_version()
          release = get_latest_version()
          
          if current == release:
              return "üõ† Version: {version} (No updates available)".format(version=current)
          else:
              return "üõ† Version: {version} ([{release} available on GitHub](https://github.com/superwerker/superwerker))".format(version=current, release=release)

        def handler(event, context):

          superwerker_config = {}
          for ssm_parameter in ssm.get_parameters(
            Names=[
              '/superwerker/domain_name_servers'
            ]
          )['Parameters']:
            superwerker_config[ssm_parameter['Name']] = ssm_parameter['Value']


          rootmail_ready_alarm_state = cw.describe_alarms(
            AlarmNames=[
                'superwerker-RootMailReady',
            ]
          )['MetricAlarms'][0]['StateValue']

          if rootmail_ready_alarm_state == 'OK':
            dns_delegation_text = """
        #### üè† {domain}
        #### ‚úÖ DNS configuration is set up correctly. 
        #### {version}
        """.format(
          domain=os.environ['SUPERWERKER_DOMAIN'],
          version=get_version_label(),
        )
          else:
            if '/superwerker/domain_name_servers' in superwerker_config:
              dns_delegation_text = """
        #### üè† {domain}
        #### ‚ùå DNS configuration needed. 
        #### {version}

        &nbsp;

        ### Next Steps 

        Please create the following NS records for your domain:

        ```
        {ns[0]}
        {ns[1]}
        {ns[2]}
        {ns[3]}
        ```
        """.format(
          domain=os.environ['SUPERWERKER_DOMAIN'],
          ns=superwerker_config['/superwerker/domain_name_servers'].split(','),
          version=get_version_label(),
        )
            else:
              dns_delegation_text = '### DNS Setup pending'

          markdown = """
        # [superwerker](https://github.com/superwerker/superwerker)
        &nbsp;

        {dns_delegation}

        &nbsp;

        ```
        Updated at {current_time} (use browser reload to refresh)
        ```
          """.format(
            dns_delegation=dns_delegation_text,
            current_time=datetime.now(),
          )

          body = {
            "widgets": [
              {
                "type": "text",
                "x": 0,
                "y": 0,
                "width": 24,
                "height": 20,
                "properties": {
                  "markdown": markdown,
                }
              }
            ]
          }

          cw.put_dashboard(
            DashboardName='superwerker',
            DashboardBody=json.dumps(body),
          )

        def log(msg):
          print(json.dumps(msg), flush=True)

Metadata:
  SuperwerkerVersion: 0.0.0-DEVELOPMENT
