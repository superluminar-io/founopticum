AWSTemplateFormatVersion: 2010-09-09
Transform: AWS::Serverless-2016-10-31
Description: Opt out of AWS AI / ML services (https://docs.aws.amazon.com/organizations/latest/userguide/orgs_manage_policies_ai-opt-out.html)

Resources:

  # Code proudly found elsewhere and partially copied from:
  # https://github.com/theserverlessway/aws-baseline
  AIOptOutPolicy:
    DependsOn: PolicyEnable
    Type: AWS::CloudFormation::CustomResource
    Properties:
      ServiceToken: !GetAtt PolicyCustomResource.Arn
      Policy: |
        {
          "services": {
            "@@operators_allowed_for_child_policies": [
              "@@none"
            ],
            "default": {
              "@@operators_allowed_for_child_policies": [
                "@@none"
              ],
              "opt_out_policy": {
                "@@operators_allowed_for_child_policies": [
                  "@@none"
                ],
                "@@assign": "optOut"
              }
            }
          }
        }
      Attach: true

  PolicyCustomResource:
    Type: AWS::Serverless::Function
    Properties:
      Timeout: 200
      Runtime: python3.7
      Handler: index.handler
      Policies:
        - Version: 2012-10-17
          Statement:
            - Effect: Allow
              Action:
                - organizations:CreatePolicy
                - organizations:UpdatePolicy
                - organizations:DeletePolicy
                - organizations:AttachPolicy
                - organizations:DetachPolicy
                - organizations:ListRoots
                - organizations:ListPolicies
                - organizations:ListPoliciesForTarget
              Resource: "*"
      InlineCode: |
        import boto3
        import cfnresponse
        import time
        import random
        import re

        o = boto3.client("organizations")

        CREATE = 'Create'
        UPDATE = 'Update'
        DELETE = 'Delete'
        AISERVICES_OPT_OUT_POLICY = "AISERVICES_OPT_OUT_POLICY"


        def root():
            return o.list_roots()['Roots'][0]


        def root_id():
            return root()['Id']

        def exception_handling(function):
            def catch(event, context):
                try:
                    function(event, context)
                except Exception as e:
                    print(e)
                    print(event)
                    cfnresponse.send(event, context, cfnresponse.FAILED, {})

            return catch

        def with_retry(function, **kwargs):
            for i in [0, 3, 9, 15, 30]:
                # Random sleep to not run into concurrency problems when adding or attaching multiple policies
                # They have to be added/updated/deleted one after the other
                sleeptime = i + random.randint(0, 5)
                print('Running {} with Sleep of {}'.format(function.__name__, sleeptime))
                time.sleep(sleeptime)
                try:
                    response = function(**kwargs)
                    print("Response for {}: {}".format(function.__name__, response))
                    return response
                except o.exceptions.ConcurrentModificationException as e:
                    print('Exception: {}'.format(e))
            raise Exception

        def handler(event, context):
            RequestType = event["RequestType"]
            Properties = event["ResourceProperties"]
            LogicalResourceId = event["LogicalResourceId"]
            PhysicalResourceId = event.get("PhysicalResourceId")
            Policy = Properties["Policy"]
            Attach = Properties["Attach"] == 'true'

            print('RequestType: {}'.format(RequestType))
            print('PhysicalResourceId: {}'.format(PhysicalResourceId))
            print('LogicalResourceId: {}'.format(LogicalResourceId))
            print('Attach: {}'.format(Attach))

            parameters = dict(
                Content=Policy,
                Name=LogicalResourceId,
                Description="Opt out of AI Services Policy",
            )

            policy_id = PhysicalResourceId

            try:
              if RequestType == CREATE:
                  print('Creating Policy: {}'.format(LogicalResourceId))
                  response = with_retry(o.create_policy,
                                        **parameters, Type=AISERVICES_OPT_OUT_POLICY
                                        )
                  policy_id = response["Policy"]["PolicySummary"]["Id"]
                  if Attach:
                      with_retry(o.attach_policy, PolicyId=policy_id, TargetId=root_id())
              elif RequestType == UPDATE:
                  print('Updating Policy: {}'.format(LogicalResourceId))
                  with_retry(o.update_policy, PolicyId=policy_id, **parameters)
              elif RequestType == DELETE:
                  print('Deleting Policy: {}'.format(LogicalResourceId))
                  # Same as above
                  if re.match('p-[0-9a-z]+', policy_id):
                      if policy_attached(policy_id):
                          with_retry(o.detach_policy, PolicyId=policy_id, TargetId=root_id())
                      with_retry(o.delete_policy, PolicyId=policy_id)
                  else:
                      print('{} is no valid PolicyId'.format(policy_id))
              else:
                  raise Exception('Unexpected RequestType: {}'.format(RequestType))

              cfnresponse.send(event, context, cfnresponse.SUCCESS, {}, policy_id)
            except Exception as e:
                print(e)
                print(event)
                cfnresponse.send(event, context, cfnresponse.FAILED, {}, policy_id)

        def policy_attached(policy_id):
            return [p['Id'] for p in
                    o.list_policies_for_target(TargetId=root_id(), Filter='AISERVICES_OPT_OUT_POLICY')['Policies'] if
                    p['Id'] == policy_id]

        def policy_attached(policy_id):
            return [p['Id'] for p in
                    o.list_policies_for_target(TargetId=root_id(), Filter='AISERVICES_OPT_OUT_POLICY')['Policies'] if
                    p['Id'] == policy_id]

  PolicyEnable:
    Type: AWS::CloudFormation::CustomResource
    Properties:
      ServiceToken: !GetAtt PolicyEnableCustomResource.Arn

  PolicyEnableCustomResource:
    Type: AWS::Serverless::Function
    Properties:
      Timeout: 200
      Handler: index.enable_policies
      Runtime: python3.7
      Policies:
        - Version: 2012-10-17
          Statement:
            - Effect: Allow
              Action:
                - organizations:EnablePolicyType
                - organizations:DisablePolicyType
                - organizations:ListRoots
              Resource: "*"
      InlineCode: |
        import boto3
        import cfnresponse
        import time
        import random
        import re

        o = boto3.client("organizations")

        CREATE = 'Create'
        UPDATE = 'Update'
        DELETE = 'Delete'
        AISERVICES_OPT_OUT_POLICY = 'AISERVICES_OPT_OUT_POLICY'

        def root():
            return o.list_roots()['Roots'][0]

        def root_id():
            return root()['Id']


        def policy_enabled():
            enabled_policies = root()['PolicyTypes']
            return {"Type": AISERVICES_OPT_OUT_POLICY, "Status": "ENABLED"} in enabled_policies


        def exception_handling(function):
            def catch(event, context):
                try:
                    function(event, context)
                except Exception as e:
                    print(e)
                    print(event)
                    cfnresponse.send(event, context, cfnresponse.FAILED, {})

            return catch


        @exception_handling
        def enable_policies(event, context):
            RequestType = event["RequestType"]
            if RequestType == CREATE and not policy_enabled():
                r_id = root_id()
                print('Enable AISERVICES_OPT_OUT_POLICY for root: {}'.format(r_id))
                o.enable_policy_type(RootId=r_id, PolicyType=AISERVICES_OPT_OUT_POLICY)
            cfnresponse.send(event, context, cfnresponse.SUCCESS, {}, 'AISERVICES_OPT_OUT_POLICY')

Metadata:
  SuperwerkerVersion: 0.0.0-DEVELOPMENT
