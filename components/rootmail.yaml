AWSTemplateFormatVersion: 2010-09-09
Transform: AWS::Serverless-2016-10-31

Parameters:
  Domain:
    Type: String
  Subdomain:
    Default: aws
    Type: String

Mappings:
  RegionMap: # https://docs.aws.amazon.com/general/latest/gr/s3.html#s3_website_region_endpoints
    us-east-1:
      Endpoint: s3-website-us-east-1.amazonaws.com
      HostedZoneID: Z3AQBSTGFYJSTF
    eu-central-1:
      Endpoint: s3-website.eu-central-1.amazonaws.com
      HostedZoneID: Z21DNDUVLTQW6Q
    eu-west-1:
      Endpoint: s3-website-eu-west-1.amazonaws.com
      HostedZoneID: Z1BKCTXD74EZPE

Outputs:

  DelegationTarget:
    Description: Nameservers for the hosted zone delegation
    Value: !Join [ ',', !GetAtt HostedZone.NameServers ]
  EmailGeneratorFunction:
    Description: Lambda function to verify email delegation and generate new email aliases
    Value: !Ref EmailGeneratorFunction

Resources:

  DomainBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Sub ${Subdomain}.${Domain}
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true
      WebsiteConfiguration:
        RedirectAllRequestsTo:
          HostName: "example.com"
          Protocol: "https"

  DomainBucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref DomainBucket
      PolicyDocument: !Sub |
        {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Action": "s3:PutObject",
              "Condition": {
                "StringEquals": {
                  "aws:Referer": "${AWS::AccountId}"
                }
              },
              "Effect": "Allow",
              "Principal": {
                "Service": "ses.amazonaws.com"
              },
              "Resource": [
                "arn:${AWS::Partition}:s3:::${DomainBucket}/RootEmails/*"
              ],
              "Sid": "EnableSESReceive"
            }
          ]
        }

  EmailGeneratorFunction:
    Type: AWS::Serverless::Function
    Properties: # TODO: use environment variables instead of variables in !Sub
      Handler: index.handler
      InlineCode: !Sub |
        import json
        import uuid

        domain = "${Subdomain}.${Domain}"

        def handler(event, context):

          max = 64 - len(domain) - 1 - 5

          alias = str(uuid.uuid4())
          alias = alias[:max] * (len(alias) > max)

          if len(alias) < 36:

            log({
              'domain': domain,
              'msg': 'UUID local part was reduced in length because your domain is too long for Control Tower (64 characters in total) - this increases the chance of collisions',
              'level': 'warn',
              'length': len(alias),
              'max': 36,
            })

          email = 'root+{alias}@{domain}'.format(alias = alias, domain = domain)

          return {
            'email': email,
          }

        def log(msg):
          print(json.dumps(msg), flush=True)

      Runtime: python3.7
      Timeout: 260 # the timeout effectivly limits retries to 2^(n+1) - 1 = 9 attempts with backup

  HostedZone:
    Type: AWS::Route53::HostedZone
    Properties:
      Name: !Sub ${Subdomain}.${Domain}
      HostedZoneConfig:
        Comment: Created by superwerker

  HostedZoneDelegationHealthCheckRecord:
    Type: AWS::Route53::RecordSet
    Properties:
      AliasTarget:
        DNSName: !Sub
          - ${Endpoint}
          - Endpoint: !FindInMap
            - RegionMap
            - !Ref "AWS::Region"
            - Endpoint
        HostedZoneId: !FindInMap
          - RegionMap
          - !Ref "AWS::Region"
          - HostedZoneID
      HostedZoneId: !Ref HostedZone
      Name: !Sub ${Subdomain}.${Domain}
      Type: A

  HostedZoneDKIMAndVerificationRecords:
    Type: AWS::CloudFormation::CustomResource
    Properties:
      ServiceToken: !GetAtt HostedZoneDKIMAndVerificationRecordsCustomResource.Arn
      Domain: !Sub ${Subdomain}.${Domain}

  HostedZoneDKIMAndVerificationRecordsCustomResource:
    Type: AWS::Serverless::Function
    Properties:
      Timeout: 200
      Handler: index.handler
      Runtime: python3.7
      Policies:
        - Version: 2012-10-17
          Statement:
            - Effect: Allow
              Action: # TODO: least privilege
                - ses:*
              Resource: "*"
      InlineCode: |
        import boto3
        import cfnresponse

        ses = boto3.client("ses")

        CREATE = 'Create'
        DELETE = 'Delete'
        UPDATE = 'Update'

        def exception_handling(function):
            def catch(event, context):
                try:
                    function(event, context)
                except Exception as e:
                    print(e)
                    print(event)
                    cfnresponse.send(event, context, cfnresponse.FAILED, {})

            return catch

        @exception_handling
        def handler(event, context):
            RequestType = event["RequestType"]
            Properties = event["ResourceProperties"]
            LogicalResourceId = event["LogicalResourceId"]
            PhysicalResourceId = event.get("PhysicalResourceId")
            Domain = Properties["Domain"]

            print('RequestType: {}'.format(RequestType))
            print('PhysicalResourceId: {}'.format(PhysicalResourceId))
            print('LogicalResourceId: {}'.format(LogicalResourceId))

            id = PhysicalResourceId

            data = {}

            if RequestType == CREATE:

                print('Creating Domain verification and DKIM records: {}'.format(LogicalResourceId))

                response = ses.verify_domain_identity(
                  Domain=Domain,
                )

                data["VerificationToken"] = response["VerificationToken"]

                response = ses.verify_domain_dkim(
                  Domain=Domain,
                )

                data["DkimTokens"] = response["DkimTokens"]

            cfnresponse.send(event, context, cfnresponse.SUCCESS, data, id)

  HostedZoneDKIMTokenRecord0:
    Type: AWS::Route53::RecordSet
    Properties:
      HostedZoneId: !Ref HostedZone
      Name: !Sub
        - "${Token}._domainkey.${Subdomain}.${Domain}"
        - { Token: !Select [ 0, !GetAtt HostedZoneDKIMAndVerificationRecords.DkimTokens ]}
      ResourceRecords:
        - !Sub
          - "${Token}.dkim.amazonses.com"
          - { Token: !Select [ 0, !GetAtt HostedZoneDKIMAndVerificationRecords.DkimTokens ]}
      TTL: 60
      Type: CNAME

  HostedZoneDKIMTokenRecord1:
    Type: AWS::Route53::RecordSet
    Properties:
      HostedZoneId: !Ref HostedZone
      Name: !Sub
        - "${Token}._domainkey.${Subdomain}.${Domain}"
        - { Token: !Select [ 1, !GetAtt HostedZoneDKIMAndVerificationRecords.DkimTokens ]}
      ResourceRecords:
        - !Sub
          - "${Token}.dkim.amazonses.com"
          - { Token: !Select [ 1, !GetAtt HostedZoneDKIMAndVerificationRecords.DkimTokens ]}
      TTL: 60
      Type: CNAME

  HostedZoneDKIMTokenRecord2:
    Type: AWS::Route53::RecordSet
    Properties:
      HostedZoneId: !Ref HostedZone
      Name: !Sub
        - "${Token}._domainkey.${Subdomain}.${Domain}"
        - { Token: !Select [ 2, !GetAtt HostedZoneDKIMAndVerificationRecords.DkimTokens ]}
      ResourceRecords:
        - !Sub
          - "${Token}.dkim.amazonses.com"
          - { Token: !Select [ 2, !GetAtt HostedZoneDKIMAndVerificationRecords.DkimTokens ]}
      TTL: 60
      Type: CNAME

  HostedZoneMXRecord:
    Type: AWS::Route53::RecordSet
    Properties:
      HostedZoneId: !Ref HostedZone
      Name: !Sub ${Subdomain}.${Domain}.
      ResourceRecords:
        - !Sub 10 inbound-smtp.${AWS::Region}.amazonaws.com
      TTL: 60
      Type: MX

  HostedZoneVerificationTokenRecord:
    Type: AWS::Route53::RecordSet
    Properties:
      HostedZoneId: !Ref HostedZone
      Name: !Sub _amazonses.${Subdomain}.${Domain}.
      ResourceRecords:
        - !Sub "\"${HostedZoneDKIMAndVerificationRecords.VerificationToken}\""
      TTL: 60
      Type: TXT

  RootmailReady:
    Type: AWS::Serverless::Function
    Properties:
      Events:
        Schedule:
          Type: Schedule
          Properties:
            Schedule: rate(5 minutes)
      Handler: index.handler
      InlineCode: !Sub |
        import boto3
        import itertools
        import json
        import time

        domain = "${Subdomain}.${Domain}"
        ses = boto3.client("ses")

        def backoff(msg, res, n):

          wait = pow(2, n)

          log({
            'level': 'info',
            'msg': msg,
            'res': res,
            'round': n,
            'waiting_in_seconds': wait,
          })

          time.sleep(n)

        def handler(event, context):

          log({
            'event': event,
            'level': 'debug',
          })

          for n in itertools.count(start=1):

            res = ses.get_account_sending_enabled()

            if res.get('Enabled'):
              break
            else:
              backoff('sending not yet enabled', res, n)

          for n in itertools.count(start=1):

            res = ses.get_identity_verification_attributes(
              Identities=[
                domain,
              ],
            )

            if res.get('VerificationAttributes', {}).get(domain, {}).get('VerificationStatus') == 'Success':
              break
            else:
              backoff('verification not yet successful', res, n)

          for n in itertools.count(start=1):

            res = ses.get_identity_dkim_attributes(
              Identities=[
                domain,
              ],
            )

            if res.get('DkimAttributes', {}).get(domain, {}).get('DkimVerificationStatus') == 'Success':
              break
            else:
              backoff('DKIM verification not yet successful', res, n)

          for n in itertools.count(start=1):

            res = ses.get_identity_notification_attributes(
              Identities=[
                domain,
              ],
            )

            if res.get('NotificationAttributes', {}).get(domain, {}).get('ForwardingEnabled') == True:
              break
            else:
              backoff('forwarding not yet enabled', res, n)

        def log(msg):
          print(json.dumps(msg), flush=True)

      Runtime: python3.7
      Policies:
        - Version: 2012-10-17
          Statement:
            - Effect: Allow
              Action: # TODO: least privilege
                - ses:*
              Resource: '*'
      Timeout: 260 # the timeout effectivly limits retries to 2^(n+1) - 1 = 9 attempts with backup

  RootmailReadyAlert:
    Type: AWS::CloudWatch::Alarm
    Properties:
      ComparisonOperator: GreaterThanOrEqualToThreshold
      Dimensions:
        - Name: FunctionName
          Value: !Ref RootmailReady
      EvaluationPeriods: 1
      MetricName: Errors
      Namespace: AWS/Lambda
      Period: 180
      Statistic: Sum
      Threshold: '1'

  RootmailReadyHandle:
    Type: AWS::CloudFormation::WaitConditionHandle

  RootmailReadyHandleWaitCondition:
    Type: AWS::CloudFormation::WaitCondition
    Properties:
      Handle: !Ref RootmailReadyHandle
      Timeout: 28800 # 8 hours time to wire DNS

  RootmailReadyTrigger:
    Type: AWS::Serverless::Function
    Properties:
      Events:
        EmailHealth:
          Type: CloudWatchEvent
          Properties:
            Pattern:
              detail-type:
                - CloudWatch Alarm State Change
              source:
                - aws.cloudwatch
              detail:
                alarmName:
                  - !Ref RootmailReadyAlert
                state:
                  value:
                    - OK
      Handler: index.handler
      Environment:
        Variables:
          SIGNAL_URL: !Ref RootmailReadyHandle
      InlineCode: |-
        import json
        import os
        import urllib3
        import uuid

        def handler(event, context):

          encoded_body = json.dumps({
              "Status": "SUCCESS",
              "Reason": "Rootmail Setup completed",
              "UniqueId": str(uuid.uuid4()),
              "Data": "Rootmail Setup completed"
          })

          http = urllib3.PoolManager()
          http.request('PUT', os.environ['SIGNAL_URL'], body=encoded_body)
      Runtime: python3.7
      Timeout: 10

  SESReceiptRuleSet:
    Type: AWS::SES::ReceiptRuleSet
    Properties:
      RuleSetName: RootEmails

  SESReceiptRuleSetActivation:
    Type: AWS::CloudFormation::CustomResource
    Properties:
      ServiceToken: !GetAtt SESReceiptRuleSetActivationCustomResource.Arn
      RuleSetName: !Ref SESReceiptRuleSet

  SESReceiptRuleSetActivationCustomResource:
    Type: AWS::Serverless::Function
    Properties:
      Timeout: 200
      Handler: index.handler
      Runtime: python3.7
      Policies:
        - Version: 2012-10-17
          Statement:
            - Effect: Allow
              Action: # TODO: least privilege
                - ses:*
              Resource: "*"
      InlineCode: | # TODO: adopt function to new ADR for inline python lambdas
        import boto3
        import cfnresponse

        ses = boto3.client("ses")

        CREATE = 'Create'
        DELETE = 'Delete'
        UPDATE = 'Update'

        def exception_handling(function):
            def catch(event, context):
                try:
                    function(event, context)
                except Exception as e:
                    print(e)
                    print(event)
                    cfnresponse.send(event, context, cfnresponse.FAILED, {})

            return catch

        @exception_handling
        def handler(event, context):
            RequestType = event["RequestType"]
            Properties = event["ResourceProperties"]
            LogicalResourceId = event["LogicalResourceId"]
            PhysicalResourceId = event.get("PhysicalResourceId")
            RuleSetName = Properties["RuleSetName"]

            print('RequestType: {}'.format(RequestType))
            print('PhysicalResourceId: {}'.format(PhysicalResourceId))
            print('LogicalResourceId: {}'.format(LogicalResourceId))

            id = PhysicalResourceId

            if RequestType == CREATE or RequestType == UPDATE:

                print('Activating SES ReceiptRuleSet: {}'.format(LogicalResourceId))

                ses.set_active_receipt_rule_set(
                  RuleSetName=RuleSetName,
                )
            elif RequestType == DELETE:
                print('Deactivating SES ReceiptRuleSet: {}'.format(LogicalResourceId))

                ses.set_active_receipt_rule_set()

            cfnresponse.send(event, context, cfnresponse.SUCCESS, {}, id)

  SESReceiptRule: # TODO: enable encryption
    Type: AWS::SES::ReceiptRule
    Properties:
      Rule:
        Actions:
          - S3Action:
              BucketName: !Ref DomainBucket
              ObjectKeyPrefix: "RootEmails"
          - LambdaAction:
              FunctionArn: !Sub ${OpsSantaFunction.Arn}
        Enabled: true
        Name: Receive
        Recipients:
          - !Sub root@${Subdomain}.${Domain}
        ScanEnabled: true
        TlsPolicy: Require
      RuleSetName: !Ref SESReceiptRuleSet

  OpsSantaFunctionSESPermissions:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Ref OpsSantaFunction
      Principal: ses.amazonaws.com
      SourceAccount: !Sub ${AWS::AccountId}

  OpsSantaFunction:
    Type: AWS::Serverless::Function
    Properties:
      Timeout: 60
      Handler: index.handler
      Runtime: python3.7
      Policies:
        - Version: 2012-10-17
          Statement:
            - Effect: Allow
              Action:
                - s3:GetObject
              Resource: !Sub ${DomainBucket.Arn}/RootEmails/*
            - Effect: Allow
              Action:
                - ssm:CreateOpsItem
              Resource: "*"
            - Action: events:PutEvents
              Effect: Allow
              Resource: '*'
      InlineCode: !Sub |
        import boto3
        import email
        from email import policy
        import hashlib
        import json
        import re

        s3 = boto3.client('s3')
        ssm = boto3.client('ssm')
        events = boto3.client('events')

        def handler(event, context):

            log({
              'event': event,
              'level': 'debug',
            })

            for record in event['Records']:

              id = record['ses']['mail']['messageId']
              key = 'RootEmails/{key}'.format(key=id)
              receipt = record['ses']['receipt']

              log({
                'id': id,
                'level': 'debug',
                'key': key,
                'msg': 'processing mail',
              })

              verdicts = {
                'dkim': receipt['dkimVerdict']['status'],
                'spam': receipt['spamVerdict']['status'],
                'spf': receipt['spfVerdict']['status'],
                'virus': receipt['virusVerdict']['status'],
              }

              for k, v in verdicts.items():

                if not v == 'PASS':

                  log({
                    'class': k,
                    'id': id,
                    'key': key,
                    'level': 'warn',
                    'msg': 'verdict failed - ops santa item skipped',
                  })

                  return

              response = s3.get_object(
                Bucket="${DomainBucket}",
                Key=key,
              )

              msg = email.message_from_bytes(response["Body"].read(), policy=policy.default)

              title=msg["subject"]

              if title == 'Amazon Web Services Password Assistance':
                description=msg.get_body('html').get_content()
                pw_reset_link = re.search(r'(https://signin.aws.amazon.com/resetpassword(.*?))(?=<br>)', description).group()

                events.put_events(
                    Entries=[
                        {
                            'DetailType': 'superwerker-event',
                            'Detail': json.dumps(
                                {
                                    'eventName': 'RootMailPwResetLink',
                                    'pwResetLink': pw_reset_link,
                                }
                            ),
                            'Source': 'superwerker'
                        }
                    ]
                )
                return # no ops item for now

              else:
                description=msg.get_body('plain').get_content()

              title=title[:1020] + " ..." * (len(title) > 1020)

              description=msg.get_body("plain").get_content()
              description=description[:1020] + " ..." * (len(description) > 1020)

              source=recipient=event["Records"][0]["ses"]["mail"]["destination"][0]
              source=source[:60] + ' ...' * (len(source) > 60)

              operational_data={
                "/aws/dedup":{
                  "Value":json.dumps(
                    {
                      "dedupString":id,
                    }
                  ),
                  "Type":"SearchableString",
                },
                "/aws/resources":{
                  "Value":json.dumps([
                    {
                      "arn":"arn:aws:s3:::${DomainBucket.Arn}/{key}".format(key=key),
                    }
                  ]),
                  "Type":"SearchableString",
                },
              }

              ssm.create_ops_item(
                Description=description,
                OperationalData=operational_data,
                Source=source,
                Title=title,
              )

        def log(msg):
          print(json.dumps(msg), flush=True)
