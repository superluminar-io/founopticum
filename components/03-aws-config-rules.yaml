AWSTemplateFormatVersion: 2010-09-09
Transform: AWS::Serverless-2016-10-31
Description: Enables various best practises across accounts

Parameters:
  AuditBucketName:
    Type: String
    Description: Audit Bucket name from the Log Archive Account

  AWSLogsS3KeyPrefix:
    Type: String
    Description: Organization ID to use as the S3 Key prefix for storing the audit logs

Resources:

  OrganizationConformancePackBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Sub awsconfigconforms-founopticum-${AWS::AccountId}

  Stackset:
    Type: Superluminar::CloudFormation::StackSet
    Properties:
      StackSetName: deploy-to-ous-sample
      PermissionModel: SERVICE_MANAGED
      AutoDeployment:
        Enabled: true
        RetainStacksOnAccountRemoval: false
      StackInstancesGroup:
        - Regions:
            - !Ref AWS::Region
          DeploymentTargets:
            OrganizationalUnitIds:
              - ou-ftbn-l0xkqvly
      TemplateBody: |
        Resources:
          SecurityHub:
            Type: AWS::SecurityHub::Hub

#  Remediation:
#    Type: Superluminar::CloudFormation::StackSet
#    Properties:
#      StackSetName: Remediation
#      PermissionModel: SERVICE_MANAGED
#      AutoDeployment:
#        Enabled: true
#        RetainStacksOnAccountRemoval: false
#      StackInstancesGroup:
#        - Regions:
#            - !Ref AWS::Region
#          DeploymentTargets:
#            OrganizationalUnitIds:
#              - r-ftbn
#      TemplateBody: |
#        Resources:
#          EnableEc2EbsEncryptionByDefaultDocument:
#            Type: AWS::SSM::Document
#            Properties:
#              DocumentType: Automation
#              Content:
#                schemaVersion: '0.3'
#                mainSteps:
#                  - name: CheckIfOrganizationAdminAccountIsAlReadyRegistered
#                    action: aws:executeAwsApi
#                    inputs:
#                      Service: guardduty
#                      Api: ListOrganizationAdminAccounts

  OrganizationConformancePackBucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref OrganizationConformancePackBucket
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Sid: AllowGetPutObject
            Effect: Allow
            Principal: "*"
            Action:
              - s3:GetObject
              - s3:PutObject
            Resource: !Sub ${OrganizationConformancePackBucket.Arn}/*
            Condition:
              StringEquals:
                aws:PrincipalOrgID: o-k2arggwiaf
              ArnLike:
                aws:PrincipalArn: arn:aws:iam::*:role/aws-service-role/config-conforms.amazonaws.com/AWSServiceRoleForConfigConforms
          - Sid: AllowGetBucketAcl
            Effect: Allow
            Principal: "*"
            Action: s3:GetBucketAcl
            Resource: !Sub ${OrganizationConformancePackBucket.Arn}
            Condition:
              StringEquals:
                aws:PrincipalOrgID: o-k2arggwiaf
              ArnLike:
                aws:PrincipalArn: arn:aws:iam::*:role/aws-service-role/config-conforms.amazonaws.com/AWSServiceRoleForConfigConforms

  OrganizationConformancePackFounopticum:
    Type: AWS::Config::OrganizationConformancePack
    Properties:
      ExcludedAccounts:
        - !Ref AWS::AccountId # exclude master account since it has no config recorder set up
      DeliveryS3Bucket: !Ref OrganizationConformancePackBucket
      OrganizationConformancePackName: founopticum
      TemplateBody: |
        Resources:
          ConfigRule:
            Type: AWS::Config::ConfigRule
            Properties:
              ConfigRuleName: ec2-ebs-encryption-by-default
              Description: >-
                A Config rule that checks that Amazon Elastic Block Store (EBS)
                encryption is enabled by default. The rule is NON_COMPLIANT if the
                encryption is not enabled.
              Scope:
                ComplianceResourceTypes: []
              Source:
                Owner: AWS
                SourceIdentifier: EC2_EBS_ENCRYPTION_BY_DEFAULT
              MaximumExecutionFrequency: TwentyFour_Hours
#
#          EnableEc2EbsEncryptionByDefaultRemediation:
#            Type: AWS::Config::RemediationConfiguration
#            Properties:
#              ConfigRuleName: !Ref ConfigRule
#              TargetId: !Ref EnableEc2EbsEncryptionByDefaultDocument
#              TargetType: SSM_DOCUMENT
#              TargetVersion: "1"





  #  EnableEc2EbsEncryptionByDefault:
#    Type: AWS::Config::OrganizationConfigRule
#    Properties:
#      ExcludedAccounts:
#        - !Ref AWS::AccountId # exclude master account since it has no config recorder set up
#      OrganizationConfigRuleName: founopticum-ec2-ebs-encryption-by-default
#      OrganizationManagedRuleMetadata:
#        RuleIdentifier: EC2_EBS_ENCRYPTION_BY_DEFAULT


#  EnableEc2EbsEncryptionByDefaultRemediation:
#    Type: "AWS::Config::RemediationConfiguration"
#    Properties:
#      ConfigRuleName: !Ref EnableEc2EbsEncryptionByDefault
#      TargetId: !Ref EnableEc2EbsEncryptionByDefaultDocument
#      TargetType: "SSM_DOCUMENT"
#      TargetVersion: "1"
#
#  EnableEc2EbsEncryptionByDefaultDocument:
#    Type: AWS::SSM::Document
#    Properties:
#      DocumentType: Automation
#      Content:
#        schemaVersion: '0.3'
#        assumeRole: !GetAtt BasicRemediationConfigurationRole.Arn
#        mainSteps:
#          - name: CheckIfOrganizationAdminAccountIsAlReadyRegistered
#            action: aws:executeAwsApi
#            inputs:
#              Service: guardduty
#              Api: ListOrganizationAdminAccounts
#
#  BasicRemediationConfigurationRole:
#    Type: AWS::IAM::Role
#    Properties:
#      AssumeRolePolicyDocument:
#        Version: 2012-10-17
#        Statement:
#          - Effect: Allow
#            Principal:
#              Service: ssm.amazonaws.com
#            Action: sts:AssumeRole
#          - Effect: Allow
#            Principal:
#              AWS: !Ref AWS::AccountId
#            Action: sts:AssumeRole
#      Policies:
#        - PolicyName: EnableAWSServiceAccess
#          PolicyDocument:
#            Statement:
#              - Effect: Allow
#                Action:
#                  - guardduty:EnableOrganizationAdminAccount
#                Resource: '*'
