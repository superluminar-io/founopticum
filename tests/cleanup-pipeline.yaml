AWSTemplateFormatVersion: 2010-09-09
Transform: AWS::Serverless-2016-10-31

Parameters:
  GitHubOwner:
    Type: String
    Default: superwerker
  RepositoryName:
    Type: String
    Default: superwerker
  BranchName:
    Type: String
    Default: master
  GithubTokenSecretsManagerPath:
    Type: String
    Default: /superwerker/github-token

Resources:

  CleanupPipelineArtifactStore:
    Type: AWS::S3::Bucket
    Properties:
      LifecycleConfiguration:
        Rules:
          - ExpirationInDays: 14
            Status: Enabled
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          -  ServerSideEncryptionByDefault:
               SSEAlgorithm: AES256

  CleanupPipeline:
    Type: AWS::CodePipeline::Pipeline
    Properties:
      RoleArn: !GetAtt CleanupPipelineServiceRole.Arn
      Stages:
        - Name: Source
          Actions:
            - Name: SourceAction
              RunOrder: 1
              ActionTypeId:
                Category: Source
                Owner: ThirdParty
                Version: 1
                Provider: GitHub
              OutputArtifacts:
                - Name: SourceOutput
              Configuration:
                Owner: !Ref GitHubOwner
                Repo: !Ref RepositoryName
                Branch: !Ref BranchName
                OAuthToken: '{{resolve:secretsmanager:/superwerker/github-token:SecretString}}'
                PollForSourceChanges: false

        - Name: InstallSuperwerker
          Actions:
            - ActionTypeId:
                Category: Build
                Owner: AWS
                Provider: CodeBuild
                Version: "1"
              Configuration:
                ProjectName: !Ref DecomissionLandingZoneTrigger
              InputArtifacts:
                - Name: SourceOutput
              Name: DecomissionLandingZone
              RunOrder: 1

            - Name: WaitForDecommission
              ActionTypeId:
                Category: Invoke
                Owner: AWS
                Provider: StepFunctions
                Version: "1"
              Configuration:
                StateMachineArn: !Ref WaitForDecommissionStateMachine
              InputArtifacts:
                - Name: SourceOutput
              RunOrder: 2

            - ActionTypeId:
                Category: Build
                Owner: AWS
                Provider: CodeBuild
                Version: "1"
              Configuration:
                ProjectName: !Ref CleanupBuildProject
              InputArtifacts:
                - Name: SourceOutput
              Name: RemoveControlTowerDecommissionFallout
              RunOrder: 3

      ArtifactStore:
        Type: S3
        Location: !Ref CleanupPipelineArtifactStore

  CleanupPipelineServiceRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service: codepipeline.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AdministratorAccess # FIXME: least privilege

  CleanupBuildProject:
    Type: AWS::CodeBuild::Project
    Properties:
      Environment:
        ComputeType: BUILD_GENERAL1_SMALL
        Image: aws/codebuild/amazonlinux2-x86_64-standard:2.0
        Type: LINUX_CONTAINER
      ServiceRole: !GetAtt CleanupBuildProjectRole.Arn
      Artifacts:
        Type: CODEPIPELINE
      Source:
        Type: CODEPIPELINE
        BuildSpec: !Sub |
          version: 0.2
          env:
            shell: bash
          phases:
            build:
              commands:
                # automate https://docs.aws.amazon.com/controltower/latest/userguide/known-issues-decommissioning.html
                - aws iam detach-role-policy --role-name AWSControlTowerAdmin --policy-arn arn:aws:iam::${AWS::AccountId}:policy/service-role/AWSControlTowerAdminPolicy || true
                - aws iam delete-policy --policy-arn arn:aws:iam::${AWS::AccountId}:policy/service-role/AWSControlTowerAdminPolicy || true
                - aws iam delete-role --role-name AWSControlTowerAdmin || true
                - aws iam detach-role-policy --role-name AWSControlTowerCloudTrailRole --policy-arn arn:aws:iam::${AWS::AccountId}:policy/service-role/AWSControlTowerCloudTrailRolePolicy || true
                - aws iam delete-policy --policy-arn arn:aws:iam::${AWS::AccountId}:policy/service-role/AWSControlTowerCloudTrailRolePolicy || true
                - aws iam delete-role --role-name AWSControlTowerCloudTrailRole || true
                - aws iam detach-role-policy --role-name AWSControlTowerStackSetRole --policy-arn arn:aws:iam::${AWS::AccountId}:policy/service-role/AWSControlTowerStackSetRolePolicy || true
                - aws iam delete-policy --policy-arn arn:aws:iam::${AWS::AccountId}:policy/service-role/AWSControlTowerStackSetRolePolicy || true
                - aws iam delete-role --role-name AWSControlTowerStackSetRole || true

                - root_id=$(aws organizations list-roots --query 'Roots[0].Id' --output text) || true
                - ou_core=$(aws organizations list-organizational-units-for-parent --parent-id $root_id --query 'OrganizationalUnits[?Name==`Core`].Id' --output text) || true
                - ou_custom=$(aws organizations list-organizational-units-for-parent --parent-id $root_id --query 'OrganizationalUnits[?Name==`Custom`].Id' --output text) || true
                - ou_graveyard=$(aws organizations list-organizational-units-for-parent --parent-id $root_id --query 'OrganizationalUnits[?Name==`graveyard`].Id' --output text) || true
                - account_id_audit=$(aws organizations list-accounts-for-parent --parent-id $ou_core --query 'Accounts[?Name==`Audit`].Id' --output text) || true
                - account_id_logarchive=$(aws organizations list-accounts-for-parent --parent-id $ou_core --query 'Accounts[?Name==`Log archive`].Id' --output text) || true

                - aws organizations move-account --account-id $account_id_logarchive --source-parent-id $ou_core --destination-parent-id $ou_graveyard || true
                - aws organizations move-account --account-id $account_id_audit --source-parent-id $ou_core --destination-parent-id $ou_graveyard || true
                - aws organizations delete-organizational-unit --organizational-unit-id $ou_core || true
                - aws organizations delete-organizational-unit --organizational-unit-id $ou_custom || true

                - aws logs delete-log-group --log-group-name aws-controltower/CloudTrailLogs || true

                # remove former parameters
                - aws ssm delete-parameter --name /superwerker_bootstrap/email_adresses || true

  CleanupBuildProjectRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          Effect: Allow
          Principal:
            Service:
             - codebuild.amazonaws.com
             - cloudformation.amazonaws.com
          Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AdministratorAccess # FIXME: least privilege
      Policies:
        - PolicyName: !Sub ${AWS::StackName}-codebuild-role-policy
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Effect: Allow
                Resource:
                  - !Sub arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/codebuild/*
              - Action:
                  - s3:GetObject*
                  - s3:GetBucket*
                  - s3:List*
                  - s3:DeleteObject*
                  - s3:PutObject*
                  - s3:Abort*
                Effect: Allow
                Resource:
                  - !Sub ${DecommissionLandingZoneArtifactLocation.Arn}
                  - !Sub ${DecommissionLandingZoneArtifactLocation.Arn}/*
              - Action:
                  - synthetics:StartCanary
                Effect: Allow
                Resource:
                  - !Sub arn:${AWS::Partition}:synthetics:${AWS::Region}:${AWS::AccountId}:canary:${DecommissionLandingZoneCanary}

  DecomissionLandingZoneTrigger:
    Type: AWS::CodeBuild::Project
    Properties:
      Environment:
        ComputeType: BUILD_GENERAL1_SMALL
        Image: aws/codebuild/amazonlinux2-x86_64-standard:2.0
        Type: LINUX_CONTAINER
      ServiceRole: !GetAtt CleanupBuildProjectRole.Arn
      Artifacts:
        Type: CODEPIPELINE
      Source:
        Type: CODEPIPELINE
        BuildSpec: !Sub |
          version: 0.2
          phases:
            build:
              commands:
                aws synthetics start-canary --name ${DecommissionLandingZoneCanary}

  WaitForDecommissionStateMachine:
    Type: AWS::Serverless::StateMachine
    Properties:
      Definition:
        StartAt: CheckDecommissionCompleted
        States:
          CheckDecommissionCompleted:
            Type: Task
            Resource: !GetAtt CheckDecommissionCompletedFunction.Arn
            Retry: # check every 20 minutes for 2 hours
              - ErrorEquals:
                  - States.ALL
                IntervalSeconds: 1200
                MaxAttempts: 6
                BackoffRate: 1
            End: true
      Policies:
        - LambdaInvokePolicy:
            FunctionName: !Ref CheckDecommissionCompletedFunction

  CheckDecommissionCompletedFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: index.handler
      Runtime: python3.7
      InlineCode: |-
        import boto3
        import botocore

        cfn = boto3.client('cloudformation')
        def handler(event, context):
          try:
              cfn.describe_stacks(
                  StackName='AWSControlTowerBP-BASELINE-CLOUDTRAIL-MASTER'
              )
              raise Exception("Control Tower still commissioned")

          except botocore.exceptions.ClientError as e:
              # as soon as the stack is gone we assume Control Tower is decommissioned
              if e.response['Error']['Message'] == 'Stack with id AWSControlTowerBP-BASELINE-CLOUDTRAIL-MASTER does not exist':
                  return
              else:
                  raise e

      Policies:
        - Version: 2012-10-17
          Statement:
            - Action:
                - cloudformation:DescribeStacks
              Effect: Allow
              Resource: '*'

  DecommissionLandingZoneCanary:
    Type: AWS::Synthetics::Canary
    Properties:
      Name: superwerker-remove-ct
      ArtifactS3Location: !Sub s3://${DecommissionLandingZoneArtifactLocation}
      ExecutionRoleArn: !GetAtt DecommissionLandingZoneCanaryRole.Arn
      RuntimeVersion: syn-1.0
      StartCanaryAfterCreation: false
      RunConfig:
        TimeoutInSeconds: 600
      Schedule:
        DurationInSeconds: 3600
        Expression: rate(0 minute)
      Code:
        Handler: pageLoadBlueprint.handler
        Script: !Sub |
          var synthetics = require('Synthetics');
          const log = require('SyntheticsLogger');

          const httpGet = url => {
            const https = require('https');
            return new Promise((resolve, reject) => {
              https.get(url, res => {
                res.setEncoding('utf8');
                let body = '';
                res.on('data', chunk => body += chunk);
                res.on('end', () => resolve(body));
              }).on('error', reject);
            });
          };

          const flowBuilderBlueprint = async function () {
            let page = await synthetics.getPage();

            await synthetics.executeStep('consoleLogin', async function () {
              const AWS = require("aws-sdk");

              const federationEndpoint = 'https://signin.aws.amazon.com/federation';
              const issuer = 'superwerker';
              const destination = 'https://console.aws.amazon.com/';

              let credentials = await AWS.config.credentialProvider.resolve((err, cred) => { return cred; }).resolvePromise()

              const session = {
                sessionId: credentials.accessKeyId,
                sessionKey: credentials.secretAccessKey,
                sessionToken: credentials.sessionToken
              };

              const encodedSession = encodeURIComponent(JSON.stringify(session));
              const signinTokenUrl = `${!federationEndpoint}?Action=getSigninToken&SessionDuration=3600&Session=${!encodedSession}`;

              const signinResponse = await httpGet(signinTokenUrl);

              let consoleLoginUrl = `${!federationEndpoint}?Action=login&Issuer=${!issuer}&Destination=${!destination}&SigninToken=${!
                JSON.parse(signinResponse).SigninToken
              }`;

              await page.goto(consoleLoginUrl, {waitUntil: ['load', 'networkidle0']});

            });

            await synthetics.executeStep('decommission', async function () {
              await page.goto("https://eu-west-1.console.aws.amazon.com/controltower/home/settings", {waitUntil: ['load', 'networkidle0']});
              await page.click("#decommission > div > div.ct-beta-features-content > div > div.awsui-util-mt-l > awsui-button > button");
              await page.click("#awsui-checkbox-0");
              await page.click("#awsui-checkbox-1");
              await page.click("#awsui-checkbox-2");
              await page.type("#awsui-input-0", "DECOMMISSION")
              await page.waitFor(10000);
              await page.click("#decommission > awsui-modal > div.awsui-modal-container > div > div > div.awsui-modal-footer.awsui-util-container-footer > span > span > awsui-button.ct-action-submit > button > span");
              await page.waitFor(10000);
              await page.click("#decommission > awsui-modal > div.awsui-modal-container > div > div > div.awsui-modal-footer.awsui-util-container-footer > span > span > awsui-button.ct-action-submit > button > span");
              await page.waitFor(10000);
            });
          };

          exports.handler = async () => {
            return await flowBuilderBlueprint();
          };

  DecommissionLandingZoneArtifactLocation:
    Type: AWS::S3::Bucket

  DecommissionLandingZoneCanaryRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AdministratorAccess
