AWSTemplateFormatVersion: 2010-09-09
Transform: AWS::Serverless-2016-10-31

Description: Provision an AWS Account with Control Tower through Service Catalog
Parameters:
  AccountName:
    Description: "Account name, the new managed Account will be created with this name."
    Type: String
    AllowedPattern : "[a-zA-Z0-9][a-zA-Z0-9._-]*"
  AccountEmail:
    Description: "Account email, must be unique for each AWS Account."
    Type: String
    AllowedPattern : "[^\\s@]+@[^\\s@]+\\.[^\\s@]+"
  SSOUserFirstName:
    Description:  "SSO user first name."
    Type: String
    AllowedPattern : ".+"
  SSOUserLastName:
    Description:  "SSO user last name."
    Type: String
    AllowedPattern : ".+"
  SSOUserEmail:
    Description: "SSO user email. A new SSO user will be created for this email, if it does not exist. This SSO user will be associated with the new managed Account."
    Type: String
    AllowedPattern : "[^\\s@]+@[^\\s@]+\\.[^\\s@]+"
  ManagedOrganizationalUnit:
    Description: "Managed organizational unit. The managed Account will be placed under this Organizational Unit."
    Type: String

Resources:

  ControlTowerServiceCatalogLookup:
    Type: AWS::CloudFormation::CustomResource
    Properties:
      ServiceToken: !GetAtt ControlTowerServiceCatalogLookupCustomResource.Arn

  ControlTowerServiceCatalogLookupCustomResource:
    Type: AWS::Serverless::Function
    Properties:
      Handler: index.handler
      Runtime: python3.7
      Policies:
        - Version: 2012-10-17
          Statement:
            - Effect: Allow
              Action:
                - servicecatalog:DescribeProductAsAdmin
                - servicecatalog:ListProvisioningArtifacts
              Resource: '*'
      InlineCode: |
        import boto3
        import cfnresponse

        sc = boto3.client("servicecatalog")

        CREATE = 'Create'
        DELETE = 'Delete'
        UPDATE = 'Update'

        def exception_handling(function):
            def catch(event, context):
                try:
                    function(event, context)
                except Exception as e:
                    print(e)
                    print(event)
                    cfnresponse.send(event, context, cfnresponse.FAILED, {})

            return catch

        @exception_handling
        def handler(event, context):
            RequestType = event["RequestType"]
            Properties = event["ResourceProperties"]
            LogicalResourceId = event["LogicalResourceId"]
            PhysicalResourceId = event.get("PhysicalResourceId")

            print('RequestType: {}'.format(RequestType))
            print('PhysicalResourceId: {}'.format(PhysicalResourceId))
            print('LogicalResourceId: {}'.format(LogicalResourceId))

            id = PhysicalResourceId

            data = {}

            ct_account_factory_sc_product = sc.describe_product_as_admin(
                Name='AWS Control Tower Account Factory'
            )

            ct_account_factory_sc_product_detail = ct_account_factory_sc_product['ProductViewDetail']['ProductViewSummary']
            ct_account_factory_sc_product_id = ct_account_factory_sc_product_detail['ProductId']
            ct_account_factory_sc_provisioning_artifacts = sc.list_provisioning_artifacts(ProductId=ct_account_factory_sc_product_id)['ProvisioningArtifactDetails']

            active_provisioning_artifact_id = [provisioning_artifact for provisioning_artifact in ct_account_factory_sc_provisioning_artifacts if provisioning_artifact['Active']][0]['Id']

            data['ActiveProvisioningArtifactId'] = active_provisioning_artifact_id

            cfnresponse.send(event, context, cfnresponse.SUCCESS, data, id)

  Account:
    Type: AWS::ServiceCatalog::CloudFormationProvisionedProduct
    Properties:
      ProductName: AWS Control Tower Account Factory
      ProvisionedProductName: !Ref AccountName
      ProvisioningArtifactId: !GetAtt ControlTowerServiceCatalogLookup.ActiveProvisioningArtifactId
      ProvisioningParameters:
        - Key: SSOUserEmail
          Value: !Ref SSOUserEmail
        - Key: AccountEmail
          Value: !Ref AccountEmail
        - Key: SSOUserFirstName
          Value: !Ref SSOUserFirstName
        - Key: SSOUserLastName
          Value: !Ref SSOUserLastName
        - Key: ManagedOrganizationalUnit
          Value: !Ref ManagedOrganizationalUnit
        - Key: AccountName
          Value: !Ref AccountName

  AccountDeleteTrigger:
    DependsOn: Account
    Type: AWS::CloudFormation::CustomResource
    Properties:
      ServiceToken: !GetAtt AccountDeleteTriggerCustomResource.Arn

  AccountDeleteTriggerCustomResource:
    DependsOn: Account
    Type: AWS::Serverless::Function
    Properties:
      Timeout: 200
      Handler: index.handler
      Runtime: python3.7
      Role: !GetAtt AccountDeletionCanariesRole.Arn
      Environment:
        Variables:
          ACCOUNT_DELETE_CANARY: !Ref AccountDeleteCanary
      InlineCode: |
        import boto3
        import cfnresponse

        cws = boto3.client('synthetics')

        CREATE = 'Create'
        DELETE = 'Delete'
        UPDATE = 'Update'

        def exception_handling(function):
            def catch(event, context):
                try:
                    function(event, context)
                except Exception as e:
                    print(e)
                    print(event)
                    cfnresponse.send(event, context, cfnresponse.FAILED, {})

            return catch

        @exception_handling
        def handler(event, context):
            RequestType = event["RequestType"]
            Properties = event["ResourceProperties"]
            LogicalResourceId = event["LogicalResourceId"]
            PhysicalResourceId = event.get("PhysicalResourceId")

            print('RequestType: {}'.format(RequestType))
            print('PhysicalResourceId: {}'.format(PhysicalResourceId))
            print('LogicalResourceId: {}'.format(LogicalResourceId))

            id = PhysicalResourceId

            data = {}

            if RequestType == DELETE:
              cws.start_canary(Name=os.environ['ACCOUNT_DELETE_CANARY'])

            cfnresponse.send(event, context, cfnresponse.SUCCESS, data, id)

  AccountDeleteCanary:
    Type: AWS::Synthetics::Canary
    Properties:
      Name: superwerker-t-del-acc
      ArtifactS3Location: !Sub s3://${AccountDeletionCanariesArtifactLocation}
      ExecutionRoleArn: !GetAtt AccountDeletionCanariesRole.Arn
      RuntimeVersion: syn-nodejs-2.1
      StartCanaryAfterCreation: false
      RunConfig:
        TimeoutInSeconds: 300
      Schedule:
        Expression: rate(0 minute) # manual start
      Code:
        Handler: pageLoadBlueprint.handler
        Script: !Sub
          - |
            // Adapted from and proudly found elsewhere at https://github.com/iann0036/aws-account-controller
            // special thanks to Ian McKay
            var synthetics = require('Synthetics');
            const LOG = require('SyntheticsLogger');
            const AWS = require('aws-sdk');
            const organizations = new AWS.Organizations({region: 'us-east-1'});

            const CONNECT_SSM_PARAMETER = '/superwerker/tests/connect'

            const CAPTCHA_KEY = '${2CaptchaKey}';

            const ACCOUNT_EMAIL = '${AccountEmail}';
            const ACCOUNT_ID = '${AccountId}'

            const flowBuilderBlueprint = async function () {
                let page = await synthetics.getPage();

                await synthetics.executeStep('pwResetEmailRequest', async function () {

                    await loginStage1(page, ACCOUNT_EMAIL);

                    await page.click('#root_forgot_password_link');

                    await page.waitFor(2000);

                    await page.waitForSelector('#password_recovery_captcha_image', {timeout: 15000});

                    captchanotdone = true;
                    captchaattempts = 0;
                    while (captchanotdone) {
                        captchaattempts += 1;
                        if (captchaattempts > 6) {
                            return;
                        }

                        let recaptchaimg = await page.$('#password_recovery_captcha_image');
                        let recaptchaurl = await page.evaluate((obj) => {
                            return obj.getAttribute('src');
                        }, recaptchaimg);


                        let captcharesult = await solveCaptcha2captcha(page, recaptchaurl);

                        let input2 = await page.$('#password_recovery_captcha_guess');
                        await input2.press('Backspace');
                        await input2.type(captcharesult, {delay: 100});

                        await page.waitFor(3000);


                        await page.click('#password_recovery_ok_button');

                        await page.waitFor(5000);

                        let errormessagediv = await page.$('#password_recovery_error_message');
                        let errormessagedivstyle = await page.evaluate((obj) => {
                            return obj.getAttribute('style');
                        }, errormessagediv);

                        if (errormessagedivstyle.includes("display: none")) {
                            captchanotdone = false;
                        }
                        await page.waitFor(2000);
                    }
                });

                await synthetics.executeStep('pwReset', async function () {
                    const AWS = require('aws-sdk');
                    const ssm = new AWS.SSM();
                    var params = {
                        Name: '/superwerker/rootmail/pw_reset_link/' + ACCOUNT_EMAIL.split('@')[0].split('+')[1]
                    };

                    tries = 0
                    max_tries = 20
                    do {
                        try {
                            parameter = await ssm.getParameter(params).promise();
                            break
                        } catch(e) {
                            console.log(e)
                            await sleep(5000)
                        }
                    }  while (++tries < max_tries);

                    pw_reset_url = parameter['Parameter']['Value']

                    await pwResetAndDelete(page, pw_reset_url, ACCOUNT_EMAIL);

                });
            };

            function sleep(ms) {
                return new Promise((resolve) => {
                    setTimeout(resolve, ms);
                });
            }

            const solveCaptcha2captcha = async (page, url) => {
                var imgbody = await httpGetBinary(url).then(res => {
                    return res;
                });

                var captcharef = await httpPostJson('https://2captcha.com/in.php', {
                    'key': CAPTCHA_KEY,
                    'method': 'base64',
                    'body': imgbody.toString('base64')
                }).then(res => {
                    console.log('2Captcha: ' + res)
                    return res.split("|").pop();
                });

                var captcharesult = '';
                var i = 0;
                while (!captcharesult.startsWith("OK") && i < 20) {
                    await new Promise(resolve => { setTimeout(resolve, 5000); });

                    captcharesult = await httpGet('https://2captcha.com/res.php?key=' + CAPTCHA_KEY + '&action=get&id=' + captcharef).then(res => {
                        return res;
                    });

                    i++;
                }

                return captcharesult.split("|").pop();
            }

            async function pwResetAndDelete(page, url, email) {

                var secretsmanager = new AWS.SecretsManager();
                let secretsmanagerresponse = await secretsmanager.getSecretValue({
                    SecretId: '/superwerker/tests/accountdeletion'
                }).promise();

                let secretdata = JSON.parse(secretsmanagerresponse.SecretString);

                await page.goto(url, {
                    timeout: 0,
                    waitUntil: ['domcontentloaded']
                });
                await page.waitFor(5000);


                let newpwinput = await page.$('#new_password');
                await newpwinput.press('Backspace');
                await newpwinput.type(secretdata.password, { delay: 100 });

                let input2 = await page.$('#confirm_password');
                await input2.press('Backspace');
                await input2.type(secretdata.password, { delay: 100 });

                await page.click('#reset_password_submit');
                await page.waitFor(5000);


                await loginStage1(page, email);

                let input4 = await page.$('#password');
                await input4.press('Backspace');
                await input4.type(secretdata.password, { delay: 100 });


                await page.click('#signin_button');
                await page.waitFor(8000);


                await page.goto('https://portal.aws.amazon.com/billing/signup?client=organizations&enforcePI=True', {
                    timeout: 0,
                    waitUntil: ['domcontentloaded']
                });
                await page.waitFor(8000);

                // /confirmation is an activation period
                if (page.mainFrame().url().split("#").pop() == "/paymentinformation") {

                    let input5 = await page.$('#credit-card-number');
                    await input5.press('Backspace');
                    await input5.type(secretdata.ccnumber, { delay: 100 });

                    await page.select('#expirationMonth', (parseInt(secretdata.ccmonth)-1).toString());

                    await page.waitFor(2000);

                    let currentyear = new Date().getFullYear();

                    await page.select('select[name=\'expirationYear\']', (parseInt(secretdata.ccyear)-currentyear).toString());

                    let input6 = await page.$('#accountHolderName');
                    await input6.press('Backspace');
                    await input6.type(secretdata.ccname, { delay: 100 });

                    await page.waitFor(2000);

                    await page.click('.form-submit-click-box > button');

                    await page.waitFor(8000);
                }

                if (page.mainFrame().url().split("#").pop() == "/identityverification") {
                    let usoption = await page.$('option[label="United States (+1)"]');
                    let usvalue = await page.evaluate( (obj) => {
                        return obj.getAttribute('value');
                    }, usoption);

                    await page.select('#countryCode', usvalue);

                    const ssm = new AWS.SSM({region: 'us-east-1'});

                    let connectssmparameter = await ssm.getParameter({
                        Name: CONNECT_SSM_PARAMETER
                    }).promise();

                    let variables = JSON.parse(connectssmparameter['Parameter']['Value']);

                    let portalphonenumber = await page.$('#phoneNumber');
                    await portalphonenumber.press('Backspace');
                    await portalphonenumber.type(variables['PHONE_NUMBER'].replace("+1", ""), { delay: 100 });

                    var phonecode = "";
                    var phonecodetext = "";
                    var captchanotdone = true;
                    var captchaattemptsfordiva = 0;
                    while (captchanotdone) {
                        captchaattemptsfordiva += 1;
                        if (captchaattemptsfordiva > 5) {
                            throw "Could not confirm phone number verification - possible error in DIVA system or credit card";
                        }
                        try {
                            let submitc = await page.$('#btnCall');

                            let recaptchaimgx = await page.$('#imageCaptcha');
                            let recaptchaurlx = await page.evaluate((obj) => {
                                return obj.getAttribute('src');
                            }, recaptchaimgx);

                            let result = await solveCaptcha2captcha(page, recaptchaurlx);

                            let input32 = await page.$('#guess');
                            await input32.press('Backspace');
                            await input32.type(result, { delay: 100 });

                            await submitc.click();
                            await page.waitFor(5000);


                            await page.waitForSelector('.phone-pin-number', {timeout: 5000});

                            phonecode = await page.$('.phone-pin-number > span');
                            phonecodetext = await page.evaluate(el => el.textContent, phonecode);

                            if (phonecodetext.trim().length == 4) {
                                captchanotdone = false;
                            } else {
                                await page.waitFor(5000);
                            }
                        } catch (error) {
                            LOG.error(error);
                        }
                    }

                    variables['CODE'] = phonecodetext;

                    await ssm.putParameter({
                        Name: CONNECT_SSM_PARAMETER,
                        Type: "String",
                        Value: JSON.stringify(variables),
                        Overwrite: true
                    }).promise();

                    await page.waitFor(30000);

                    try {
                        await page.click('#verification-complete-button');
                    } catch(err) {
                        LOG.error("Could not confirm phone number verification - possible error in DIVA system or credit card");
                        throw err;
                    }

                    await page.waitFor(3000);


                }

                if (page.mainFrame().url().split("#").pop() == "/support" || page.mainFrame().url().split("#").pop() == "/confirmation") {
                    await page.goto('https://console.aws.amazon.com/billing/rest/v1.0/account', {
                        timeout: 0,
                        waitUntil: ['domcontentloaded']
                    });

                    await page.waitFor(3000);

                    let accountstatuspage = await page.content();


                    let issuspended = accountstatuspage.includes("\"accountStatus\":\"Suspended\"");

                    if (!issuspended) {
                        await page.goto('https://console.aws.amazon.com/billing/home?#/account', {
                            timeout: 0,
                            waitUntil: ['domcontentloaded']
                        });

                        await page.waitFor(8000);

                        let closeaccountcbs = await page.$$('.close-account-checkbox > input');
                        await closeaccountcbs.forEach(async (cb) => {
                            await cb.click();
                        });

                        await page.waitFor(1000);

                        await page.click('.btn-danger'); // close account button

                        await page.waitFor(1000);

                        await page.click('.modal-footer > button.btn-danger'); // confirm close account button

                        await page.waitFor(5000);
                    }

                    await removeAccountFromOrg();
                } else {
                    LOG.warn("Unsure of location, send help! - " + page.mainFrame().url());
                }
            }

            async function removeAccountFromOrg(account) {
                await retryWrapper(organizations, 'removeAccountFromOrganization', {
                    AccountId: ACCOUNT_ID
                });

                LOG.info("Removed account from Org");

                return true;
            }

            exports.handler = async () => {
                return await flowBuilderBlueprint();
            };


            async function loginStage1(page, email) {
                await page.goto('https://console.aws.amazon.com/console/home', {
                    timeout: 0,
                    waitUntil: ['domcontentloaded']
                });
                await page.waitForSelector('#resolving_input', {timeout: 15000});
                await page.waitFor(500);

                let resolvinginput = await page.$('#resolving_input');
                await resolvinginput.press('Backspace');
                await resolvinginput.type(email, { delay: 100 });

                await page.click('#next_button');

                await page.waitFor(5000);

                let captchacontainer = await page.$('#captcha_container');

                let captchacontainerstyle = await page.evaluate((obj) => {
                    return obj.getAttribute('style');
                }, captchacontainer);

                var captchanotdone = true;
                var captchaattempts = 0;

                if (captchacontainerstyle.includes("display: none")) {
                } else {
                    while (captchanotdone) {
                        captchaattempts += 1;
                        if (captchaattempts > 6) {
                            return;
                        }
                        try {
                            let submitc = await page.$('#submit_captcha');

                            let recaptchaimgx = await page.$('#captcha_image');
                            let recaptchaurlx = await page.evaluate((obj) => {
                                return obj.getAttribute('src');
                            }, recaptchaimgx);

                            let result = await solveCaptcha2captcha(page, recaptchaurlx);

                            let input3 = await page.$('#captchaGuess');
                            await input3.press('Backspace');
                            await input3.type(result, { delay: 100 });

                            await submitc.click();
                            await page.waitFor(5000);


                            captchacontainer = await page.$('#captcha_container');
                            captchacontainerstyle = await page.evaluate((obj) => {
                                return obj.getAttribute('style');
                            }, captchacontainer);

                            if (captchacontainerstyle.includes("display: none")) {


                                captchanotdone = false;
                            }
                        } catch (error) {
                        }
                    }

                    await page.waitFor(5000);
                }
            }



            const httpGet = url => {
                const https = require('https');
                return new Promise((resolve, reject) => {
                    https.get(url, res => {
                        res.setEncoding('utf8');
                        let body = '';
                        res.on('data', chunk => body += chunk);
                        res.on('end', () => resolve(body));
                    }).on('error', reject);
                });
            };

            const httpGetBinary = url => {
                const https = require('https');
                return new Promise((resolve, reject) => {
                    https.get(url, res => {
                        //res.setEncoding('binary');
                        var data = [ ];
                        res.on('data', chunk => data.push(chunk));
                        res.on('end', () => resolve(Buffer.concat(data)));
                    }).on('error', reject);
                });
            };

            const httpPostJson = (url, postData) => {
                const https = require('https');
                var querystring = require('querystring');

                postData = querystring.stringify(postData);

                var options = {
                    method: 'POST',
                };

                return new Promise((resolve, reject) => {
                    let req = https.request(url, options);
                    req.on('response', (res) => {
                        //If the response status code is not a 2xx success code
                        if (res.statusCode < 200 || res.statusCode > 299) {
                            reject("Failed: " + options.path);
                        }

                        res.setEncoding('utf8');
                        let body = '';
                        res.on('data', chunk => {
                            body += chunk;
                        });
                        res.on('end', () => resolve(body));
                    });

                    req.on('error', (error) => {
                        reject(error);
                    });

                    req.write(postData);
                    req.end();
                });
            };

            async function retryWrapper(client, method, params) {
                return new Promise((resolve, reject) => {
                    client[method](params).promise().then(data => {
                        resolve(data);
                    }).catch(err => {
                        if (err.code == "TooManyRequestsException") {
                            LOG.debug("Got TooManyRequestsException, sleeping 5s");
                            setTimeout(() => {
                                retryWrapper(client, method, params).then(data => {
                                    resolve(data);
                                }).catch(err => {
                                    reject(err);
                                });
                            }, 5000); // 5s
                        } else if (err.code == "OptInRequired") {
                            LOG.debug("Got OptInRequired, sleeping 20s");
                            setTimeout(() => {
                                retryWrapper(client, method, params).then(data => {
                                    resolve(data);
                                }).catch(err => {
                                    reject(err);
                                });
                            }, 20000); // 20s
                        } else {
                            reject(err);
                        }
                    });
                });
            }

          - 2CaptchaKey: '{{resolve:secretsmanager:/superwerker/tests/2captcha_api_key:SecretString}}'
            AccountEmail: !Ref AccountEmail
            AccountId: !GetAtt Account.Outputs.AccountId

  AccountDeletionCanariesRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AdministratorAccess

  AccountDeletionCanariesArtifactLocation:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Sub superwerker-cwsyn-accountdel-${AWS::AccountId}
      LifecycleConfiguration:
        Rules:
          - ExpirationInDays: 1
            Status: Enabled

Outputs:

  AccountId:
    Description: Nameservers for the hosted zone delegation
    Value: !GetAtt Account.Outputs.AccountId
